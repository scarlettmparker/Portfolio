// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MinecraftPlayer {
  id        Int                 @id @default(autoincrement())
  usernames MinecraftUsername[]
  uuid      String
}

model MinecraftUsername {
  id                Int              @id @default(autoincrement())
  username          String           @unique
  minecraftPlayerId Int?
  MinecraftPlayer   MinecraftPlayer? @relation(fields: [minecraftPlayerId], references: [id])
}

model Game {
  id      String  @id
  player0 Boolean @default(false)
  player1 Boolean @default(false)
  player  Int     @default(0)
  state   Json[]  @default([])
}

model Piece {
  id       String         @id
  skin     Int[]
  moveSets PieceMoveSet[]
}

model MoveSet {
  id     Int            @id @default(autoincrement())
  moves  Int[]
  pieces PieceMoveSet[]
}

model PieceMoveSet {
  pieceId   String
  moveSetId Int

  piece   Piece   @relation(fields: [pieceId], references: [id])
  moveSet MoveSet @relation(fields: [moveSetId], references: [id])

  @@id([pieceId, moveSetId])
}

model User {
  id                  Int                         @id @default(autoincrement())
  discordId           String                      @unique
  username            String
  auth                String                      @unique
  avatar              String                      @default("0")
  nickname            String                      @default("None")
  levels              String[]
  permissions         String[]
  accountCreationDate Int
  acceptedPolicy      Boolean                     @default(false)
  annotations         Annotation[]
  interactions        UserAnnotationInteraction[]
  RestrictedUser      RestrictedUser?
  SuperUser           SuperUser?
  BannedUser          BannedUser?
  BypassUser          BypassUser?

  @@unique([username, auth])
}

model SuperUser {
  id        Int    @id @default(autoincrement())
  discordId String @unique
  user      User   @relation(fields: [discordId], references: [discordId])
}

model RestrictedUser {
  id        Int    @id @default(autoincrement())
  discordId String @unique
  reason    String
  user      User   @relation(fields: [discordId], references: [discordId])
}

model BannedUser {
  id        Int    @id @default(autoincrement())
  discordId String @unique
  reason    String
  user      User   @relation(fields: [discordId], references: [discordId])
}

model BypassUser {
  id        Int    @id @default(autoincrement())
  discordId String @unique
  reason    String
  user      User   @relation(fields: [discordId], references: [discordId])
}

model TextObject {
  id    Int    @id @default(autoincrement())
  title String
  level String
  text  Text[]
  textGroup Int   @default(0)
}

model Text {
  id           Int          @id @default(autoincrement())
  text         String
  language     String
  textObjectId Int
  textObject   TextObject   @relation(fields: [textObjectId], references: [id])
  annotations  Annotation[]
  audio        Audio?       @relation(fields: [audioId], references: [id])
  audioId      Int?         @unique
}

model Audio {
  id             Int    @id @default(autoincrement())
  audioFile      String
  vttFile        String
  submissionName String
  submissionLink String?
  text           Text?
}

model Annotation {
  id           Int                         @id @default(autoincrement())
  start        Int
  end          Int
  description  String
  likes        Int                         @default(0)
  dislikes     Int                         @default(0)
  textId       Int
  text         Text                        @relation(fields: [textId], references: [id])
  creationDate Int
  userId       Int
  user         User?                       @relation(fields: [userId], references: [id])
  interactions UserAnnotationInteraction[]
}

model UserAnnotationInteraction {
  id           Int             @id @default(autoincrement())
  userId       Int
  annotationId Int
  type         InteractionType
  user         User            @relation(fields: [userId], references: [id])
  annotation   Annotation      @relation(fields: [annotationId], references: [id])

  @@unique([userId, annotationId])
}

enum InteractionType {
  LIKE
  DISLIKE
}
